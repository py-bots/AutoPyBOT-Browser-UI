import os
import re
import requests
import subprocess
import sys
import shutil
import textwrap
import time
import logging
import ctypes
import json # Import json
from pathlib import Path
from dotenv import load_dotenv
from playwright.sync_api import sync_playwright
import webbrowser  # Import webbrowser module
import asyncio  # Import asyncio
import pyttsx3  # For text-to-speech
import base64

# --- Configuration ---
load_dotenv()  # Load environment variables from .env file if it exists

username = os.getenv("USERNAME")

CHROME_PATH = os.getenv("CHROME_PATH", r"C:\Program Files\Google\Chrome\Application\chrome.exe")
DEFAULT_USER_DATA_DIR = os.getenv("DEFAULT_USER_DATA_DIR", fr"C:\Users\{username}\AppData\Local\Google\Chrome\User Data")
NEW_PROFILE_NAME = os.getenv("NEW_PROFILE_NAME", "ChromeAutomationProfile")
NEW_PROFILE_DIR = Path.home() / NEW_PROFILE_NAME
VENV_DIR = Path(os.getenv("VENV_DIR", Path.home() / "AutoPyBot_venv"))
WEB_UI_REPO_URL = os.getenv("WEB_UI_REPO_URL", "https://github.com/browser-use/web-ui.git")
# WEB_UI_DIR = Path(os.getenv("WEB_UI_DIR", Path.cwd() / "web-ui"))
WEB_UI_DIR = Path(os.getenv("WEB_UI_DIR", Path.cwd() / "web-ui")) # Ensure WEB_UI_DIR is a Path object
UI_PORT = int(os.getenv("UI_PORT", 7788))
UI_URL = f"http://127.0.0.1:{UI_PORT}"
REMOTE_DEBUGGING_PORT = int(os.getenv("REMOTE_DEBUGGING_PORT", 9222))
LOG_DIR = Path(os.getenv("LOG_DIR", "logs"))  # Directory for logs, default 'logs' subdir
LOG_FILE_NAME = os.getenv("LOG_FILE_NAME", "AutoPyBOT.log")
LOG_FILE_PATH = LOG_DIR / LOG_FILE_NAME


# --- Log Directory (Improved) ---
# 1. User's Documents Directory (Recommended):
LOG_DIR = Path.home() / "Documents" / "AutoPyBOT" / "logs"
# 2. Application's Directory (Alternative):
# if getattr(sys, 'frozen', False):  # Check if running as a bundled executable
#     exe_dir = Path(sys.executable).parent
# else:
#     exe_dir = Path.cwd()
# LOG_DIR = exe_dir / "logs"

LOG_FILE_NAME = os.getenv("LOG_FILE_NAME", "AutoPyBOT.log")
LOG_FILE_PATH = LOG_DIR / LOG_FILE_NAME

# Ensure Log Directory Exists
LOG_DIR.mkdir(parents=True, exist_ok=True)  # Create the directory

WEBUI_PY_ORIGINAL_EMBEDDED = "<BASE64_ENCODED_webui.py.original_CONTENT>"
WEBUI_PY_TEMPLATE_EMBEDDED = "<BASE64_ENCODED_webui.py.template_CONTENT>"
WEBUI_PY_INITIAL_EMBEDDED = "<BASE64_ENCODED_INITIAL_webui.py_CONTENT>" # Embed initial webui.py as well

webui_py_original_path = WEB_UI_DIR / "webui.py.original"
webui_py_template_path = WEB_UI_DIR / "webui.py.template"
webui_py_path = WEB_UI_DIR / "webui.py"

webui_py_original_abs = str(webui_py_original_path.resolve())  # Get absolute path
webui_py_template_abs = str(webui_py_template_path.resolve())  # Get absolute path
webui_py_abs = str(webui_py_path.resolve())  # Get absolute path

# print(f"webui_py_original_abs: {webui_py_original_abs}") # Print for verification
# print(f"webui_py_template_abs: {webui_py_template_abs}") # Print for verification
# print(f"webui_py_abs: {webui_py_abs}") # Print for verification

# --- Requirements ---
# Ideally, these would be in a separate requirements.txt file.
# For a single-file script, we keep them here for programmatic installation.
REQUIREMENTS = [
    "browser-use",
    "gradio",
    "json-repair",
    "langchain-mistralai",
    "playwright",
    "uv",
    "python-dotenv",
    "psutil",
    "requests"
]

# --- Logging Configuration ---
LOG_DIR.mkdir(parents=True, exist_ok=True)  # Ensure log directory exists
logging.basicConfig(filename=LOG_FILE_PATH, level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info(f"Log file path: {LOG_FILE_PATH}")

# --- Helper Functions ---

def is_admin():
    """Check if the current process has administrator privileges."""
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except Exception as e:
        logging.error(f"Admin check failed: {e}")
        return False

def check_git_installed():
    """Ensure that Git is installed on the system."""
    try:
        subprocess.check_call(["git", "--version"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        logging.info("Git is installed.")
    except FileNotFoundError:
        logging.error("Git is not installed. Please install Git and try again.")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Git check failed with an unexpected error: {e}")
        sys.exit(1)


def clone_web_ui():
    """Clone the web-ui repository. ONLY CLONES, NO MODIFICATIONS HERE."""
    try:
        if not WEB_UI_DIR.exists():
            logging.info(f"Cloning web-ui repository from {WEB_UI_REPO_URL}...")
            subprocess.check_call(["git", "clone", WEB_UI_REPO_URL, str(WEB_UI_DIR)])
            logging.info("Web-ui repository cloned successfully.")
        else:
            logging.info("Web-ui repository already exists.")

        webui_py_path = WEB_UI_DIR / "webui.py"

        # Decode and write embedded original file
        webui_original_content = base64.b64decode("").decode("utf-8")
        with open(WEB_UI_DIR / "webui.py.original", "w", encoding="utf-8") as f:
            f.write(webui_original_content)
        logging.info("Decoded and wrote embedded webui.py.original")

        # Decode and write embedded template file
        webui_template_content = base64.b64decode("").decode("utf-8")
        with open(WEB_UI_DIR / "webui.py.template", "w", encoding="utf-8") as f:
            f.write(webui_template_content)
        logging.info("Decoded and wrote embedded webui.py.template")

        # Decode and write embedded initial webui.py file
        webui_initial_content = base64.b64decode("").decode("utf-8")
        with open(WEB_UI_DIR / "webui.py", "w", encoding="utf-8") as f: # Write initial webui.py to webui.py
            f.write(webui_initial_content)
        logging.info("Decoded and wrote embedded initial webui.py to webui.py")

        create_webui_template()  # Create template immediately after cloning
        modify_webui_py() # Call modify_webui_py() when repo exists as well.

    except subprocess.CalledProcessError as e:
        logging.error(f"Error cloning web-ui repository: Git command failed with error code {e.returncode}")
        if hasattr(e, 'stderr') and e.stderr:
            logging.error(f"Command output (stderr):\n{e.stderr.decode()}")
    except Exception as e:
        logging.error(f"Error in clone_web_ui: {e}")

async def set_default_llm_provider(page):
    """Sets the default LLM provider using Playwright."""
    try:
        # Wait for the dropdown to be visible (adjust timeout as needed)
        await page.locator('input[aria-label="LLM Provider"]').wait_for(state="visible", timeout=10000)  # Use the aria-label

        # Click the dropdown to open the options
        await page.click('input[aria-label="LLM Provider"]')

        # Wait for the options to be visible (adjust timeout as needed)
        await page.locator('ul[role="listbox"]').wait_for(state="visible", timeout=10000)

        # Click the "google" option (replace "google" with the exact text)
        await page.click('li[role="option"]:has-text("google")')  # Use :has-text() selector

        logging.info("Set default LLM provider to Google using Playwright.")

    except Exception as e:
        logging.exception(f"Error in clone_web_ui(): {e}")  # Log the full exception with traceback

def create_webui_template(): # Renamed from modify_webui_py's template creation part
    webui_py_path = WEB_UI_DIR / "webui.py"
    webui_template_path = WEB_UI_DIR / "webui.py.template"
    original_webui_path = WEB_UI_DIR / "webui.py.original"

    if not webui_template_path.exists():
        if original_webui_path.exists():
            with open(original_webui_path, "r", encoding="utf-8") as original_file:
                template_content = original_file.read()

                # Replace placeholders for title, header, and API key link
                template_content = template_content.replace('gr.Blocks(title="Browser Use WebUI"', 'gr.Blocks(title="PLACEHOLDER_TITLE"')
                template_content = template_content.replace('gr.Markdown("""\n# 🌐 Browser Use WebUI', 'gr.Markdown("""\n# 🌐 PLACEHOLDER_HEADER_TITLE')
                template_content = template_content.replace('### [Get Gemini FREE API Key](https://aistudio.google.com/apikey)', 'PLACEHOLDER_API_KEY_LINK')

                # Add sound placeholder (improved regex for robustness)
                template_content = re.sub(
                    r"(final_result, errors, model_actions, model_thoughts, latest_videos, trace, history_file, stop_button, run_button = result)",
                    r"\1\n        # PLACEHOLDER_TASK_COMPLETED_SOUND",
                    template_content
                )


                with open(webui_template_path, "w", encoding="utf-8") as f:
                    f.write(template_content)
                logging.info(f"Created webui.py.template at: {webui_template_path}")
        else:
            logging.error(f"Original webui.py file not found at {original_webui_path}. Cannot create template.")
            # return


def modify_webui_py():
    webui_py_path = WEB_UI_DIR / "webui.py"
    webui_template_path = WEB_UI_DIR / "webui.py.template"

    try:
        with open(webui_template_path, "r", encoding="utf-8") as f:
            template_content = f.read()

        # Replace placeholders
        modified_content = template_content.replace("PLACEHOLDER_TITLE", "AutoPyBOT with Browser Use WebUI")
        modified_content = modified_content.replace("PLACEHOLDER_HEADER_TITLE", "AutoPyBOT with Browser Use WebUI")
        modified_content = modified_content.replace("PLACEHOLDER_API_KEY_LINK", "### [Get Gemini FREE API Key](https://aistudio.google.com/apikey)")

        with open(webui_py_path, "w", encoding="utf-8") as f:
            f.write(modified_content)
        logging.info("Modified webui.py from template successfully.")

                # Insert sound code (using the robust split and insert method)
        with open(webui_py_path, "r", encoding="utf-8") as f:
            webui_content = f.read()

        sound_code = """
                import pyttsx3
                engine = pyttsx3.init()
                engine.say("Task Completed")
                engine.runAndWait()
        """

        parts = webui_content.split("# PLACEHOLDER_TASK_COMPLETED_SOUND")
        if len(parts) == 2:
            webui_content = parts[0] + "# PLACEHOLDER_TASK_COMPLETED_SOUND\n" + sound_code + parts[1]
            with open(webui_py_path, "w", encoding="utf-8") as f:
                f.write(webui_content)
            logging.info("Inserted sound playing code into webui.py")
        else:
            logging.warning("Placeholder not found in webui.py")

    except FileNotFoundError:
        logging.error(f"webui.py.template not found at: {webui_template_path}")
    except Exception as e:
        logging.error(f"Error modifying webui.py from template: {e}")

def create_virtualenv():
    """Create a virtual environment at VENV_DIR, or check if existing one is valid."""
    try:
        if VENV_DIR.exists():
            python_exe_test = VENV_DIR / "Scripts" / "python.exe"
            if python_exe_test.exists():
                try:
                    subprocess.check_call([str(python_exe_test), "-c", "import sys; print(sys.executable)"],
                                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    logging.info("Virtual environment already exists and is functional.")
                    return  # Exit function if venv is OK
                except (subprocess.CalledProcessError, FileNotFoundError):
                    logging.warning("Existing virtual environment is not functional. Recreating...")
                    shutil.rmtree(VENV_DIR)  # Remove broken venv
                    # Fall through to create a new one

        logging.info("Creating virtual environment...")
        subprocess.check_call([sys.executable, "-m", "venv", str(VENV_DIR)])
        logging.info("Virtual environment created successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error creating virtual environment: Command failed with error code {e.returncode}")
        if hasattr(e, 'stderr') and e.stderr:
            logging.error(f"Command output (stderr):\n{e.stderr.decode()}")
        if hasattr(e, 'stdout') and e.stdout:
            logging.error(f"Command output (stdout):\n{e.stdout.decode()}")
    except Exception as e:
        logging.error(f"Error in create_virtualenv: {e}")

def run_in_venv(cmd_list, cwd=None):
    """Run a command inside the virtual environment."""
    try:
        python_exe = VENV_DIR / "Scripts" / "python.exe"
        full_cmd = [str(python_exe)] + cmd_list
        logging.info("Running in venv: " + " ".join(full_cmd))
        subprocess.check_call(full_cmd, cwd=cwd)
    except subprocess.CalledProcessError as e:
        logging.error(f"Error running command in venv: Command failed with error code {e.returncode}")
        logging.error(f"Command: {' '.join(cmd_list)}")
        if hasattr(e, 'stderr') and e.stderr:
            logging.error(f"Command output (stderr):\n{e.stderr.decode()}")
        if hasattr(e, 'stdout') and e.stdout:
            logging.error(f"Command output (stdout):\n{e.stdout.decode()}")
        raise
    except FileNotFoundError:
        logging.error(f"Python executable not found in virtual environment: {python_exe}")
        raise
    except Exception as e:
        logging.error(f"Error in run_in_venv: {e}")
        raise

def install_packages():
    """Install required packages in the virtual environment from REQUIREMENTS list."""
    try:
        logging.info("Installing required packages...")
        run_in_venv(["-m", "pip", "install", "--upgrade", "pip"])
        run_in_venv(["-m", "pip", "install"] + REQUIREMENTS)
        logging.info("Required packages installed successfully.")
    except Exception as e:
        logging.error(f"Error in install_packages: {e}")
        raise

def install_web_ui_requirements():
    """Install packages from the web-ui's requirements.txt file if it exists."""
    try:
        req_file = WEB_UI_DIR / "requirements.txt"
        if req_file.exists():
            logging.info("Installing web-ui requirements...")
            run_in_venv(["-m", "pip", "install", "-r", "requirements.txt"], cwd=str(WEB_UI_DIR))
            logging.info("Web-ui requirements installed successfully.")
        else:
            logging.info(f"No requirements.txt file found in the web-ui repository at: {req_file}")
    except Exception as e:
        logging.error(f"Error in install_web_ui_requirements: {e}")
        raise

def update_env_file():
    """Create or update the .env file with Chrome settings."""
    try:
        env_file = Path(".env")
        env_content = f'CHROME_PATH="{CHROME_PATH}"\nCHROME_USER_DATA="{NEW_PROFILE_DIR}"\n'
        env_file.write_text(env_content, encoding="utf-8")
        load_dotenv()
        logging.info("Updated .env file with Chrome settings.")
    except Exception as e:
        logging.error(f"Error in update_env_file: {e}")

# def free_port(port):
#     """Terminate any process using the specified port."""
#     try:
#         for conn in psutil.net_connections(kind='inet'):
#             # Ensure that the connection has a valid pid before processing
#             if conn.laddr.port == port and conn.status == 'LISTEN' and conn.pid:
#                 proc = psutil.Process(conn.pid)
#                 logging.info(f"Terminating process {proc.pid} on port {port}...")
#                 proc.terminate()
#                 try:
#                     proc.wait(timeout=5)  # Wait for process to terminate
#                     logging.info(f"Process {proc.pid} terminated successfully.")
#                 except psutil.TimeoutExpired:
#                     logging.warning(f"Process {proc.pid} did not terminate within timeout.")
#     except psutil.NoSuchProcess:
#         logging.info(f"Process using port {port} already terminated or not found.")
#     except Exception as e:
#         logging.error(f"Error in free_port: {e}")

def copy_user_data():
    """Copy the user's existing Chrome profile data to a new profile for AutoPyBot."""
    try:
        default_user_data_path = Path(DEFAULT_USER_DATA_DIR)
        if not default_user_data_path.exists():
            logging.error(f"Default user data directory not found: {DEFAULT_USER_DATA_DIR}")
            sys.exit(1)

        if NEW_PROFILE_DIR.exists():
            logging.info(f"Profile directory {NEW_PROFILE_DIR} already exists. Skipping copy.")
        else:
            logging.info(f"Copying user data from {DEFAULT_USER_DATA_DIR} to {NEW_PROFILE_DIR}...")
            shutil.copytree(default_user_data_path, NEW_PROFILE_DIR, dirs_exist_ok=True) # dirs_exist_ok is used, merging user data if NEW_PROFILE_DIR exists.
            logging.info("User data copied successfully.")
    except FileNotFoundError:
        logging.error(f"Source user data directory not found: {DEFAULT_USER_DATA_DIR}")
        sys.exit(1)
    except shutil.Error as e:
        logging.error(f"Error during user data copy operation: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Unexpected error copying user data: {e}")
        sys.exit(1)

def launch_chrome_with_profile():
    """Launch Chrome with the newly created profile for customization."""
    try:
        subprocess.Popen([CHROME_PATH, f"--user-data-dir={NEW_PROFILE_DIR}", "--no-first-run"], shell=False)
        logging.info("Chrome launched with the new profile for customization.")
    except FileNotFoundError:
        logging.error(f"Chrome executable not found at: {CHROME_PATH}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Error launching Chrome with profile: {e}")
        sys.exit(1)

def launch_chrome_with_remote_debugging():
    """Launch Chrome with remote debugging enabled."""
    try:
        subprocess.Popen(
            [CHROME_PATH, f"--remote-debugging-port={REMOTE_DEBUGGING_PORT}", f"--user-data-dir={NEW_PROFILE_DIR}", "--no-first-run"],
            shell=False
        )
        logging.info("Chrome launched with remote debugging enabled.")
    except FileNotFoundError:
        logging.error(f"Chrome executable not found at: {CHROME_PATH}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Error launching Chrome with remote debugging: {e}")
        sys.exit(1)

def start_web_ui():
    """Start the Web UI in a separate process."""
    try:
        logging.info("Starting the Web UI...")
        python_exe = VENV_DIR / "Scripts" / "python.exe"
        # cmd = [str(python_exe), "webui.py", "--ip", "127.0.0.1", "--port", str(UI_PORT)]
        cmd = [str(python_exe), "webui.py", "--ip", "127.0.0.1", "--port", str(UI_PORT), "--theme", "Soft", "--dark-mode"]
        process = subprocess.Popen(cmd, cwd=str(WEB_UI_DIR))
        logging.info(f"Web UI process started successfully with PID: {process.pid}")
        return process
    except FileNotFoundError:
        logging.error(f"Python executable not found: {python_exe}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Error starting Web UI: {e}")
        sys.exit(1)

def open_ui_browser():
    """Open the Web UI URL in the default browser."""
    time.sleep(2)  # Short delay to make sure UI is up
    try:
        logging.info(f"Opening Web UI in default browser at: {UI_URL}")
        webbrowser.open_new_tab(UI_URL)
    except Exception as e:
        logging.error(f"Error opening Web UI browser: {e}")

async def configure_api_key():
    """Instruct the user to configure the API key."""
    engine = pyttsx3.init()
    instructions = (
        "To use Gemini, please visit the following website to obtain your API key: "
        "Once you have the key, please configure it in the LLM Configuration."
    )
    logging.info(instructions) # Use logging.info instead of print
    engine.say(instructions)
    engine.runAndWait()

async def get_gemini_api_key(page):
    """Gets the Gemini API key (manual copy)."""
    try:
        logging.info("Navigating to Gemini API Key page...")
        await page.goto("https://aistudio.google.com/apikey", wait_until="load", timeout=60000)
        logging.info("Gemini API Key page loaded successfully.")

        # 1. Click the "Get API Key" button
        get_api_key_button_selector = "button:has-text('Get API key')"
        await page.click(get_api_key_button_selector, timeout=60000)
        logging.info("Clicked the 'Get API Key' button.")

        # 2. Click the "Create API key" button
        create_api_key_button_selector = "button:has-text('Create API key')"
        await page.locator(create_api_key_button_selector).wait_for(state="visible", timeout=60000)
        await page.click(create_api_key_button_selector, timeout=60000)
        logging.info("Clicked the 'Create API key' button.")

        engine = pyttsx3.init()
        instructions = (
            "Please copy the API key from the opened website and paste it "
            "into the web interface at Browser Use WebUI, choosing Google from LLM Configuration."
        )
        logging.info(instructions) # Use logging.info instead of print
        engine.say(instructions)
        engine.runAndWait()

        return None  # Return None because the key is manually copied

    except Exception as e:
        logging.exception(f"Error getting API key: {e}") # logging.exception is better here to include traceback
        logging.error(f"Error getting API key: {e}") # Keep error log for consistency
        raise

async def welcome_user():
    """Welcome the user with a voice message."""
    engine = pyttsx3.init()
    welcome_message = "Welcome to AutoPyBOT with Browser Use WebUI!"
    logging.info(welcome_message) # Use logging.info instead of print
    engine.say(welcome_message)
    engine.runAndWait()

def check_api_key_configured():
    """Check if the Gemini API key is already configured (e.g., in a file or setting)."""
    # Placeholder logic; replace with actual API key verification.
    return False # Consider implementing actual check or making it configurable

def check_api_key_in_webui():
    """Check if the Gemini API key is already present in the WebUI."""
    try:
        # Placeholder: replace with your actual logic to check the key.
        return False # Consider implementing actual check or making it configurable
    except Exception as e:
        logging.error(f"Error checking API key in WebUI: {e}")
        return False

def insert_prompts_into_webui(webui_py_path):
    try:
        with open(webui_py_path, "r", encoding="utf-8") as f:
            webui_content = f.read()

        prompts_code = """
import time

def display_prompts():
    prompts = [
        "Prompt: Add my latest LinkedIn follower to my leads in Salesforce.",
        "More Example at https://github.com/browser-use/browser-use?tab=readme-ov-file#demos"
    ]

    with gr.Row():  # Or gr.Column() for vertical layout
        prompt_display = gr.Markdown("")

    for prompt in prompts:
        prompt_display.value = prompt
        time.sleep(2)

    return prompt_display
"""

        # 1. Insert function definition (outside gr.Blocks)
        import_match = re.search(r"import gradio as gr", webui_content)
        if import_match:
            insert_point = import_match.end()
            new_content = webui_content[:insert_point] + "\n" + prompts_code + webui_content[insert_point:]
        else:
            logging.warning("Could not find 'import gradio as gr'. Function definition not inserted.")
            return

        # 2. Find the placeholder and insert the component call there.
        placeholder_match = re.search(r"# PLACEHOLDER_FOR_PROMPTS", new_content)  # Search for the placeholder

        if placeholder_match:
            insert_point = placeholder_match.start()

            # Insert the actual call to the display_prompts function, not the function definition again.
            insertion_code = "\n        prompts_component = display_prompts()"
            new_content = new_content[:insert_point] + insertion_code + new_content[placeholder_match.end():]

            with open(webui_py_path, "w", encoding="utf-8") as f:
                f.write(new_content)
            logging.info("Prompts inserted into webui.py successfully.")
        else:
            logging.warning("Could not find the placeholder in webui.py. Prompts not inserted.")

    except FileNotFoundError:
        logging.error(f"webui.py not found at: {webui_py_path}")
    except Exception as e:
        logging.error(f"Error inserting prompts into webui.py: {e}")

async def check_webui_started(url, timeout=30):
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url)
            if response.status_code == 200:
                logging.info("Web UI started successfully.")
                return True
        except requests.exceptions.ConnectionError:
            logging.info("Web UI is not yet available. Retrying...")
            time.sleep(2)
        except Exception as e:
            logging.error(f"Error checking Web UI status: {e}")
            return False
    return False

# --- Main Execution Flow ---
async def main():
    try:
        if not is_admin():
            logging.warning("Administrator privileges are required. Relaunching as administrator...")
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
            return

        logging.info("Starting setup...") # Use logging.info instead of print
        check_git_installed()
        clone_web_ui()
        time.sleep(3)  # Short delay to ensure cloning is complete

        # webui_py_path = WEB_UI_DIR / "webui.py"
        # if webui_py_path.exists():  # Modify only if webui.py exists (i.e. after a successful clone)
        #     modify_webui_py()

        create_virtualenv()
        install_packages()  # Install core requirements
        install_web_ui_requirements()  # Install web-ui specific requirements
        update_env_file()

        webui_py_path = WEB_UI_DIR / "webui.py"
        insert_prompts_into_webui(webui_py_path)  # Insert the prompts code

        # Profile management - create and customize if needed
        try:
            if not NEW_PROFILE_DIR.exists():
                logging.info("\nCreating a new Chrome profile for automation...")
                copy_user_data()

            if not (NEW_PROFILE_DIR / "FirstRun").exists():
                launch_chrome_with_profile()
                logging.info("\nChrome is now open with your new profile. Customize it (e.g., bookmarks, logins).")
                input("Once done, press Enter to continue...")
                (NEW_PROFILE_DIR / "FirstRun").touch()
        except Exception as e:
            logging.error(f"Error during profile management: {e}")
            sys.exit(1)  # Exit if profile creation is critical


        # Start Web UI and open browser
        webui_process = start_web_ui()  # Get the process object
        time.sleep(5)  # Allow the UI some time to start
        if not await check_webui_started(UI_URL, timeout=30):
            logging.error("Web UI did not start within the timeout. Exiting.")
            if webui_process:
                webui_process.terminate()
            sys.exit(1)

        launch_chrome_with_remote_debugging()  # Launch Chrome for automation

        open_ui_browser()

        await welcome_user()  # Welcome message

        # Set the default LLM provider using Playwright *after* the page has loaded
        async with sync_playwright() as p:
            try:
                browser = await p.chromium.connect_over_cdp(f"ws://127.0.0.1:{REMOTE_DEBUGGING_PORT}/devtools/browser")
                context = browser.contexts[0]
                page = context.pages[0] if context.pages else await context.new_page()

                await page.goto(UI_URL, wait_until="networkidle2")  # Wait until page loads
                await set_default_llm_provider(page)

                await browser.close()  # Close the browser when done with Playwright
            except Exception as e:
                logging.error(f"Error in Playwright interaction: {e}")
                if browser:
                    await browser.close()
                sys.exit(1) # Exit if Playwright interaction failed

        api_key_configured = check_api_key_configured()
        if not api_key_configured:
            await configure_api_key()

        logging.info("\nSetup and Automation Session Complete.") # Use logging.info instead of print
        input("Press Enter to exit.")      # Consider using logging.info and removing input in automated scripts. Or keep it for user interaction in setup process.

        # Terminate the Web UI process when done
        if webui_process:
            webui_process.terminate()
            try:
                webui_process.wait(timeout=5)
                logging.info("Web UI process terminated.")
            except subprocess.TimeoutExpired:
                logging.warning("Web UI process did not terminate gracefully.")

    except SystemExit:
        logging.error("Setup terminated due to a critical error (see logs).")
        logging.info("\nSetup terminated due to a critical error. Check the log file for details.") # Use logging.info instead of print
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
        logging.exception(e) # logging.exception is better here to include traceback
        logging.info(f"\nAn unexpected error occurred. Check the log file '{LOG_FILE_PATH}' for details.") # Use logging.info instead of print

if __name__ == "__main__":
    asyncio.run(main())

# .\.venv\Scripts\activate
# python .\bootstrap.py
# pyinstaller --onefile bootstrap.py
# pyinstaller --onefile --add-data "C:\Users\mrmay\OneDrive\Desktop\AutoPyBOT-Browser-UI\web-ui\webui.py.original;web-ui" --add-data "C:\Users\mrmay\OneDrive\Desktop\AutoPyBOT-Browser-UI\web-ui\webui.py.template;web-ui" --add-data "C:\Users\mrmay\OneDrive\Desktop\AutoPyBOT-Browser-UI\web-ui\webui.py;web-ui" bootstrap.py
# https://github.com/py-bots/AutoPyBOT-Browser-UI   